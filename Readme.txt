CellMigration2D_durotaxis.m…

Description
This script runs the 2D cell migration simulation migration code. It uses parallel computing to generate migration trajectories and traction forces for a given underlying stiffness of the substrate. Stiffness gradients and cellular properties can be set by the user to predict how these dynamics play a role in durotactic behavior.

Required Scripts/Toolboxes
DrawCells.m
Parallel Computing Toolbox

Input Structures
Model Parameters
mParams.runTime - Simulated time (s)
mParams.dt - Time step (s)
mParams.numCells - Number of cells to simulate
mParams.samples - Number of experimental replicates
mParams.seed - Seed for random number genreator (rng)

Physical Constants
Force generation constants:
pConsts.Fmotor - Stall force for a single myosin II motor (N)
pConsts.motors - Average number of myosin II motors per F-actin-
pConsts.Fmax - Stress Fiber force (N) 
pConsts.v0 - Maximum (unloaded) myosin II sliding velocity on F-actin (m/s)

ECM binding constants
pConsts.uInt - Average Integrins/F-actin
pConsts.kon - Integrin-SF assembly rate (s^-1)
pConsts.friction - Bond friction (m * kg m-1 s-1)

Focal adhesion constants
pConsts.pPax - Probability of Paxillin bound to Integrin
pConsts.kon_Act - Actin-Paxillin on rate (s^-1)
pConsts.F_thres - Force sensor threshold (N)
pConsts.maxSF - Limit for numer of stress fiber/seed
pConsts.avgSF - Avg number of initiation sites/cell

Actin polymerization constants
pConsts.tRtrc - Average time to retraction (s)
pConsts.vRet - Average SF retraction velocity (um/s)
pConsts.vExtL - Average leading edge SF growth velocity (um/s)
pConsts.vExtT - Average trailing edge SF growth velocity (um/s)

ECM constants
pConsts.Estiff - Elasticity of stiff gel (Pa)
pConsts.Esoft - Elasticity of soft gel (Pa)
pConsts.Kstiff - Stiffness of stiff gel (N/m)
pConsts.Ksoft - Stiffness of soft gel (N/m)
pConsts.Gradient - Length of gradient between soft and stiff (um)

Output Matrices
cellPos(k,l,m,n) – k = x and y positions; l = time point; m = cell number; n = sample
Traction(l,m,n) – l = cell number; m = time point; n = sample


CellMigration2D_force.m…

Description
This script simulates a number cells fixed at the interface between to substrates of differing stiffnesses and calculates the component forces generated by each cell. 

Required Scripts/Toolboxes
DrawCells.m
Parallel Computing Toolbox

Input Structures
Same as CellMigration2D_durotaxis.m

Output Matrices 
ForceX(l,m,n) – l = cell number; m = time point; n = sample
ForceY(l,m,n) – l = cell number; m = time point; n = sample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

CellTrack_Gradient_rev1.m…

Description
This script runs a cell tracker for brightfield images of cell migrating on photopatterned polyacrylamide gels of different stiffness regions. The user can draw where the soft-stiff boundary is located in the image and track cells as they migrate to get cell trajectories, division events, and underlying substrate. The tracker using a neural network trained on MDA-MB-231 cells to locate cell centroids. 

Requirements
GNetData2.mat
GNetData3.mat
Image Processing Toolbox
Deep Learning Toolbox

Input
fldrSave – filepath to where data will be saved
fldrOpen – filepath to where images are located

Output
L#Data.mat – Stores equations for lines of soft-stiff boundary
S#Data.mat – Stores cell position data
cellPos(k,l,m,n) – k = time point; l = x and y positions; m = underlying stiffness, 0 is soft, 1 is stiff; n = cell ID/parent cell

Commands
Left click - Add new cell position
Right click - Move existing cell position
Space - Goto next image
Backspace goto previous 
S - Inverts cell selction window image (Optimizes auto-select for if cell are either bright-centered or dark-centered
D - Lock closest cell position
F - Unlock closest cell position
H - Hide cell tracks
J - Show cell tracks
Del - Delete closest cell

Directions
1) All image files must be .tif format and should have the suffix _s#_t#.tif where s# is the postion and t# is the time point. Example: MDAMB231_Nov192020_s1_t1.tif
2) Set the variable fileNum to the first position you want to analyze and autoUpdate to 1 if you want it to automatically load the next position each time the script is run.
3) Set the prefix to the name of all your images. Example: prefix = MDAMB231_Nov192020.
4) Set the file paths for saving position data (fldrSave) and loading images (fldrOpen).
5) Run the script from the editor or command window. On the first run, it will automatically organize the images for each position into their own unique folders, labeled S# for each position.
6) If the play variable is set to 1, a video of the position will play.
7) The first position will be displayed, where you can select two points along a boundary to draw where it is located. After these two points are chosen, the remaining lines will be drawn automatically at each boundary. NOTE: The script is set to draw lines for a soft region of 170 um, and a stiff region of 115 um, and a resolution of 512x512. If your gels or images have different sizes, change the xres, yres, len, and rto variables accordingly.
8) Press del if the lines don’t line up with the boundaries to redraw lines. Otherwise press the spacebar to begin tracking cells.
9) Pick initial cell positions by left-clicking on each cell. Press the space bar to move to next position.
10) The CNN will try to guess the next position of each cell, but if guesses incorrectly for any cell, you can correct it by right-clicking the correct position. If a cell divides, you can left-click the new cell and it will keep track of the mother-daughter pair. Cells that die or migrate out of the frame can be deleted. Press the space bar to move to next position.
11) Repeat step 10 for each position. Refer to command list for other features.
12) Position data can then be analyzed in Excel or Matlab.

Support
Email Ben Yeoman at byeoman@eng.ucsd.edu
